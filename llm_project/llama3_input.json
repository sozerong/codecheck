[
    {
        "instruction": "Evaluate the code in ./extracted_files\\GETCHA-main\\BE\\app.py",
        "input": "import pathlib\ntemp = pathlib.PosixPath\npathlib.PosixPath = pathlib.WindowsPath\n\nimport torch\nfrom flask import Flask, request, jsonify, render_template_string, send_file\nfrom PIL import Image, ImageDraw, ImageFont\nimport io\n\n# Flask 앱 초기화\napp = Flask(__name__)\n\n# YOLOv5 학습된 모델 로드 \nmodel = torch.hub.load('ultralytics/yolov5', 'custom', \n                       path='학습된 모델 경로',\n                       force_reload=True)\n\n# 빨간색 (RGB 값)\nred_color = (255, 0, 0)\n\n# 간단한 HTML 확인 및 이미지 업로드 페이지 추가\n@app.route('/')\ndef home():\n    return render_template_string('''\n    <html>\n    <head><title>Flask 서버 확인</title></head>\n    <body>\n        <h1>이미지 업로드 테스트</h1>\n        <form method=\"POST\" action=\"/predict\" enctype=\"multipart/form-data\">\n            <label>이미지 선택:</label>\n            <input type=\"file\" name=\"image\" accept=\"image/*\">\n            <br><br>\n            <input type=\"submit\" value=\"이미지 업로드 및 예측\">\n        </form>\n    </body>\n    </html>\n    ''')\n\n# 추론 함수 정의 (바운딩 박스 및 텍스트 추가)\ndef predict_image(image_bytes):\n    img = Image.open(io.BytesIO(image_bytes))\n    results = model(img)\n\n    # 바운딩 박스를 그리기 위한 객체\n    draw = ImageDraw.Draw(img)\n\n    # 폰트 설정 (크기 조절, 경로는 시스템에 맞게 설정해야 함)\n    try:\n        font = ImageFont.truetype(\"arial.ttf\", 30)  # Arial 폰트와 크기 70\n    except IOError:\n        font = ImageFont.load_default()  # Arial 폰트가 없을 때 기본 폰트 사용\n\n    # 바운딩 박스 정보 저장 (클래스, 신뢰도)\n    predictions = []\n\n    # 결과에서 좌표와 신뢰도 추출\n    for i, box in enumerate(results.xyxy[0]):  # 예측된 모든 객체에 대해\n        xmin, ymin, xmax, ymax, confidence, class_id = box[:6]\n\n        # 모든 객체에 빨간색을 적용\n        color = red_color\n\n        # 바운딩 박스 그리기\n        draw.rectangle([xmin, ymin, xmax, ymax], outline=color, width=5)  # 빨간색 바운딩 박스\n        draw.text((xmin, ymin), f'{i+1}. {results.names[int(class_id)]} {confidence:.2f}', fill=color, font=font)  # 객체 번호와 클래스 이름, 신뢰도 표시\n\n        # 클래스, 신뢰도, 바운딩 박스 좌표를 JSON에 저장\n        predictions.append({\n            \"object_id\": i + 1,  # 객체 번호 추가\n            \"class\": results.names[int(class_id)],\n            \"confidence\": float(confidence),\n            \"box\": [float(xmin), float(ymin), float(xmax), float(ymax)],\n            \"color\": color  # 빨간색 추가\n        })\n\n    # 이미지를 로컬에 저장 (웹에서 볼 수 있도록)\n    img_path = \"predicted_image.jpg\"\n    img.save(img_path)\n\n    return img_path, predictions\n\n# API 엔드포인트 정의 (이미지 추론)\n@app.route('/predict', methods=['POST'])\ndef predict():\n    if 'image' not in request.files:\n        return jsonify({'error': 'Image file is required'}), 400\n    file = request.files['image']\n    img_bytes = file.read()\n\n    # 바운딩 박스 그려진 이미지와 예측 정보 반환\n    img_path, predictions = predict_image(img_bytes)\n    \n    # 이미지 URL과 예측 결과 반환\n    return jsonify({\"image_url\": \"/image\", \"predictions\": predictions})\n\n# 이미지를 반환하는 엔드포인트\n@app.route('/image', methods=['GET'])\ndef get_image():\n    return send_file(\"predicted_image.jpg\", mimetype='image/jpeg')\n\n# Flask 서버 실행\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5001)\n",
        "output": "API call failed with status 400"
    },
    {
        "instruction": "Evaluate the code in ./extracted_files\\GETCHA-main\\FE\\public\\index.html",
        "input": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <link rel=\"icon\" href=\"%PUBLIC_URL%/favicon.ico\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <meta name=\"theme-color\" content=\"#000000\" />\n    <meta\n      name=\"description\"\n      content=\"Web site created using create-react-app\"\n    />\n    <link rel=\"apple-touch-icon\" href=\"%PUBLIC_URL%/logo192.png\" />\n    <!--\n      manifest.json provides metadata used when your web app is installed on a\n      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/\n    -->\n    <link rel=\"manifest\" href=\"%PUBLIC_URL%/manifest.json\" />\n    <!--\n      Notice the use of %PUBLIC_URL% in the tags above.\n      It will be replaced with the URL of the `public` folder during the build.\n      Only files inside the `public` folder can be referenced from the HTML.\n\n      Unlike \"/favicon.ico\" or \"favicon.ico\", \"%PUBLIC_URL%/favicon.ico\" will\n      work correctly both with client-side routing and a non-root public URL.\n      Learn how to configure a non-root public URL by running `npm run build`.\n    -->\n    <title>React App</title>\n  </head>\n  <body>\n    <noscript>You need to enable JavaScript to run this app.</noscript>\n    <div id=\"root\"></div>\n    <!--\n      This HTML file is a template.\n      If you open it directly in the browser, you will see an empty page.\n\n      You can add webfonts, meta tags, or analytics to this file.\n      The build step will place the bundled scripts into the <body> tag.\n\n      To begin the development, run `npm start` or `yarn start`.\n      To create a production bundle, use `npm run build` or `yarn build`.\n    -->\n  </body>\n</html>\n",
        "output": "API call failed with status 400"
    },
    {
        "instruction": "Evaluate the code in ./extracted_files\\GETCHA-main\\FE\\src\\App.css",
        "input": ".App {\n  text-align: center;\n}\n\n.App-logo {\n  height: 40vmin;\n  pointer-events: none;\n}\n\n@media (prefers-reduced-motion: no-preference) {\n  .App-logo {\n    animation: App-logo-spin infinite 20s linear;\n  }\n}\n\n.App-header {\n  background-color: #282c34;\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  font-size: calc(10px + 2vmin);\n  color: white;\n}\n\n.App-link {\n  color: #61dafb;\n}\n\n@keyframes App-logo-spin {\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n}\n",
        "output": "API call failed with status 400"
    },
    {
        "instruction": "Evaluate the code in ./extracted_files\\GETCHA-main\\FE\\src\\App.js",
        "input": "import logo from './logo.svg';\nimport './App.css';\nimport backgroundImage from '../src/assets/images/railsbackground.png';\nimport check from '../src/assets/images/check.png';\nimport banner from '../src/assets/images/banner.png';\nimport sample from '../src/assets/images/sample.png';\nimport upload from '../src/assets/images/upload.png';\nimport hover from '../src/assets/images/hoverupload.png';\nimport before from '../src/assets/images/BeforeScan.png';\n\nimport styled from 'styled-components';\nimport MainBox from './Components/MainBox';\nimport PhotoUploader from './Components/PhotoUploader';\n\nconst BackImg = styled.div`\n    background-image:url(${backgroundImage});\n    background-repeat:no-repeat;\n    background-size:cover;\n    background-size:1920px 1080px;\n    padding:0px 360px;\n\n    height:100vw;\n`\nconst StyledDiv = styled.div`\n    display:flex;`\nconst CheckBox = styled.div`\n  display:flex;\n  margin:16px 0px 35.54px 0px;\n`\nconst StyledP = styled.p`\n  font-size:18px;\n  color:#767676;\n  margin:0;\n  font-family:var(--font-regular);\n  display:flex;\n  align-items: center;\n`\nconst CheckImg = styled.img`\n  width:28.35px; height:28.35px;\n  margin-right:16px;\n`\n\n\nfunction App() {\n  return (\n    <BackImg>\n      <StyledDiv>\n        <img src={sample} style={{width:'420.59px', height:'94.58px', margin:'63px auto 70.42px auto'}}></img>\n      </StyledDiv>\n      <StyledDiv>\n          <MainBox text='이미지 업로드' firstImg={upload} secImg={hover}></MainBox>\n          <MainBox text='이상감지' firstImg={before}></MainBox>\n      </StyledDiv>\n      <CheckBox>\n        <CheckImg src={check}></CheckImg>\n        <StyledP>이미지를 업로드하시면 서비스 약관에 동의하시는 것으로 간주하며, 철도로잉의 개인정보 처리방침 및 서비스 이용약관이 적용됩니다.</StyledP>\n      </CheckBox>\n      <img src={banner} style={{width:'1200px', height:'98px'}}></img>\n\n      {/* <PhotoUploader></PhotoUploader> */}\n      </BackImg>\n      \n  );\n}\n\nexport default App;\n",
        "output": "API call failed with status 400"
    },
    {
        "instruction": "Evaluate the code in ./extracted_files\\GETCHA-main\\FE\\src\\App.test.js",
        "input": "import { render, screen } from '@testing-library/react';\nimport App from './App';\n\ntest('renders learn react link', () => {\n  render(<App />);\n  const linkElement = screen.getByText(/learn react/i);\n  expect(linkElement).toBeInTheDocument();\n});\n",
        "output": "API call failed with status 400"
    },
    {
        "instruction": "Evaluate the code in ./extracted_files\\GETCHA-main\\FE\\src\\index.css",
        "input": "@font-face{\n  font-family: \"Pretendard-semibold\";\n  font-weight: normal;\n  src: url('./assets/fonts/Pretendard/Pretendard-SemiBold.otf')\n}\n@font-face{\n  font-family:\"Pretendard-bold\";\n  font-weight: normal;\n  src:url(\"./assets/fonts/Pretendard/Pretendard-Bold.otf\")\n}\n@font-face{\n  font-family:\"Pretendard-medium\";\n  font-weight:normal;\n  src:url(\"./assets/fonts/Pretendard/Pretendard-Medium.otf\")\n}\n@font-face{\n  font-family:\"Pretendard-regular\";\n  font-weight:normal;\n  src:url(\"./assets/fonts/Pretendard/Pretendard-Regular.otf\")\n}\n:root {\n  --font-semibold:\"Pretendard-semibold\";\n  --font-bold:\"Pretendard-bold\";\n  --font-medium:\"Pretendard-medium\";\n  --font-regular:\"Pretendard-regular\";\n}\nbody {\n  margin: 0;\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\n    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n    sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\ncode {\n  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\n    monospace;\n}\n",
        "output": "API call failed with status 400"
    },
    {
        "instruction": "Evaluate the code in ./extracted_files\\GETCHA-main\\FE\\src\\index.js",
        "input": "import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",
        "output": "API call failed with status 400"
    },
    {
        "instruction": "Evaluate the code in ./extracted_files\\GETCHA-main\\FE\\src\\reportWebVitals.js",
        "input": "const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n",
        "output": "API call failed with status 400"
    },
    {
        "instruction": "Evaluate the code in ./extracted_files\\GETCHA-main\\FE\\src\\setupTests.js",
        "input": "// jest-dom adds custom jest matchers for asserting on DOM nodes.\n// allows you to do things like:\n// expect(element).toHaveTextContent(/react/i)\n// learn more: https://github.com/testing-library/jest-dom\nimport '@testing-library/jest-dom';\n",
        "output": "API call failed with status 400"
    },
    {
        "instruction": "Evaluate the code in ./extracted_files\\GETCHA-main\\FE\\src\\Components\\MainBox.js",
        "input": "import React, { useCallback,useEffect } from 'react';\nimport { useDropzone } from 'react-dropzone';\nimport styled from \"styled-components\";\nimport axios from 'axios';\n\n\nconst StyledDiv = styled.div`\n    width:592px; height:513px;\n    box-sizing: border-box;\n    border-radius:14px;\n    border-top: 63px solid #509AD1;\n    display:inline-block;\n    margin:5px;\n    position:relative;\n    font-family:var(--font-bold);\n    cursor:pointer;\n`\nconst StyledText = styled.p`\n    font-size:22px; color:#FFFFFF;\n    position:absolute;\n    top:-45px;\n    left:37px;\n    margin:0;\n`\nconst MainImg = styled.img`\n    width:592px; height:450px;\n`\nfunction MainBox({text,firstImg,secImg}){\n\n    const onDrop = useCallback(async(acceptedFiles) => {\n        console.log(acceptedFiles); // 업로드된 파일 리스트\n        // 파일을 서버로 전송하거나, 로컬에 미리보기로 표시할 수 있습니다.\n        const formData = new FormData();\n        acceptedFiles.forEach(file => {\n            formData.append('file', file);\n        });\n\n        try {\n            const response = await axios.post('https://a2e7-34-80-242-39.ngrok-free.app/', formData, {\n                headers: {\n                    'Content-Type': 'multipart/form-data'\n                }\n            });\n            console.log(response);\n            alert('파일 업로드 성공');\n        } catch (error) {\n            console.error(error);\n            alert('파일 업로드 실패');\n        }\n    }, []);\n    \n      \n\n    const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop, accept: 'image/*' });\n\n    return(\n        <StyledDiv {...getRootProps()}>\n           <StyledText>{text}</StyledText>\n           {isDragActive ? (\n                <MainImg src={secImg}></MainImg>\n           ):(\n                <MainImg src={firstImg}></MainImg>\n           )}\n           {/* <MainImg src={beforeImg}></MainImg> */}\n        </StyledDiv>\n    )\n}\nexport default MainBox;",
        "output": "API call failed with status 400"
    },
    {
        "instruction": "Evaluate the code in ./extracted_files\\GETCHA-main\\FE\\src\\Components\\PhotoUploader.js",
        "input": "import React, { useCallback } from 'react';\nimport { useDropzone } from 'react-dropzone';\nimport styled from 'styled-components';\n\nconst DropZoneContainer = styled.div`\n  width: 400px;\n  height: 200px;\n  border: 2px dashed #509AD1;\n  border-radius: 10px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n  margin: 20px;\n`;\n\nconst UploadMessage = styled.p`\n  font-size: 16px;\n  color: #509AD1;\n`;\n\nfunction PhotoUploader() {\n  const onDrop = useCallback((acceptedFiles) => {\n    console.log(acceptedFiles); // 업로드된 파일 리스트\n    // 파일을 서버로 전송하거나, 로컬에 미리보기로 표시할 수 있습니다.\n  }, []);\n\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop, accept: 'image/*' });\n\n  return (\n    <DropZoneContainer {...getRootProps()}>\n      <input {...getInputProps()} />\n      {isDragActive ? (\n        <UploadMessage>Drop the files here...</UploadMessage> // 드래그 해서 올려놓았을 때\n      ) : (\n        <UploadMessage>Drag & drop some images here, or click to select files</UploadMessage> // 드래그 하기 전\n      )}\n    </DropZoneContainer>\n  );\n}\n\nexport default PhotoUploader;\n",
        "output": "API call failed with status 400"
    }
]